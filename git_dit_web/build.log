   Compiling webgit_iron v0.1.0 (file:///home/spc/Schreibtisch/studium/semester7/thesis/webgit_iron)
warning: doc comment not used by rustdoc
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: #[warn(unused_doc_comment)] on by default
   = note: this error originates in a macro outside of the current crate

warning: doc comment not used by rustdoc
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: this error originates in a macro outside of the current crate

warning: unused imports: `Read`, `Write`
  --> src/main.rs:45:21
   |
45 | use std::io::{self, Read, Write};
   |                     ^^^^  ^^^^^
   |
   = note: #[warn(unused_imports)] on by default

warning: unused import: `libgitdit::Issue`
  --> src/webutil/iron_handlers.rs:21:5
   |
21 | use libgitdit::Issue; 
   |     ^^^^^^^^^^^^^^^^

warning: unused imports: `DirectorySource`, `HandlebarsEngine`
  --> src/webutil/iron_handlers.rs:24:11
   |
24 | use hbs::{HandlebarsEngine, DirectorySource};
   |           ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> src/webutil/iron_handlers.rs:31:5
   |
31 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused import: `params::Params`
  --> src/webutil/iron_handlers.rs:33:5
   |
33 | use params::Params;
   |     ^^^^^^^^^^^^^^

warning: unused import: `urlencoded::UrlEncodedBody`
  --> src/webutil/iron_handlers.rs:34:5
   |
34 | use urlencoded::UrlEncodedBody;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::process::exit`
  --> src/webutil/iron_handlers.rs:37:5
   |
37 | use std::process::exit;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `error::LoggableError`
  --> src/webutil/iron_handlers.rs:38:5
   |
38 | use error::LoggableError;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::process::Command`
   --> src/webutil/iron_handlers.rs:161:6
    |
161 | 	use std::process::Command;
    | 	    ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> src/webutil/iron_handlers.rs:192:5
    |
192 | use std::collections::HashMap;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Write`, `self`
 --> src/webutil/cat_files.rs:3:15
  |
3 | use std::io::{self, Write};
  |               ^^^^  ^^^^^

warning: unused import: `chrono::format::strftime::StrftimeItems`
 --> src/webutil/cat_files.rs:4:5
  |
4 | use chrono::format::strftime::StrftimeItems;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `docopt::Docopt`
 --> src/webutil/cat_files.rs:5:5
  |
5 | use docopt::Docopt;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `Blob`, `ObjectType`, `Reference`, `Signature`, `Tag`, `Tree`
 --> src/webutil/cat_files.rs:6:24
  |
6 | use git2::{Repository, Reference, ObjectType, Blob, Commit, Signature, Tag, Tree};
  |                        ^^^^^^^^^  ^^^^^^^^^^  ^^^^          ^^^^^^^^^  ^^^  ^^^^

warning: unused import: `error::*;`
 --> src/webutil/cat_files.rs:9:5
  |
9 | use error::*;
  |     ^^^^^^^^^

warning: unused import: `error::ErrorKind as EK`
  --> src/webutil/cat_files.rs:10:5
   |
10 | use error::ErrorKind as EK;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `IteratorExt`
  --> src/webutil/cat_files.rs:11:25
   |
11 | use system::{Abortable, IteratorExt};
   |                         ^^^^^^^^^^^

warning: unused import: `iron::status`
  --> src/webutil/cat_files.rs:15:5
   |
15 | use iron::status;
   |     ^^^^^^^^^^^^

warning: unused import: `libgitdit::*;`
  --> src/webutil/cat_files.rs:18:5
   |
18 | use libgitdit::*;
   |     ^^^^^^^^^^^^^

warning: unused imports: `DirectorySource`, `HandlebarsEngine`, `MemorySource`, `Template`
  --> src/webutil/cat_files.rs:20:11
   |
20 | use hbs::{Template, HandlebarsEngine, DirectorySource, MemorySource};
   |           ^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `Handlebars`, `Helper`, `RenderContext`, `RenderError`
  --> src/webutil/cat_files.rs:21:23
   |
21 | use hbs::handlebars::{Handlebars, RenderContext, RenderError, Helper};
   |                       ^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^

warning: unused imports: `SerializeStruct`, `Serialize`, `Serializer`
  --> src/webutil/cat_files.rs:22:18
   |
22 | use serde::ser::{Serialize, Serializer, SerializeStruct};
   |                  ^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `webutil::tags::*;`
   --> src/webutil/cat_files.rs:149:5
    |
149 | use webutil::tags::*;
    |     ^^^^^^^^^^^^^^^^^

warning: unused import: `chrono::format::strftime::StrftimeItems`
   --> src/webutil/cat_files.rs:423:9
    |
423 |     use chrono::format::strftime::StrftimeItems;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Values`
 --> src/webutil/util.rs:2:24
  |
2 | use clap::{ArgMatches, Values};
  |                        ^^^^^^

warning: unused import: `Commit`
 --> src/webutil/util.rs:3:18
  |
3 | use git2::{self, Commit, Repository};
  |                  ^^^^^^

warning: unused imports: `Match`, `Regex`
 --> src/webutil/util.rs:4:13
  |
4 | use regex::{Regex, Match};
  |             ^^^^^  ^^^^^

warning: unused import: `std::fs::File`
 --> src/webutil/util.rs:5:5
  |
5 | use std::fs::File;
  |     ^^^^^^^^^^^^^

warning: unused import: `std::io`
 --> src/webutil/util.rs:6:5
  |
6 | use std::io;
  |     ^^^^^^^

warning: unused import: `std::path::PathBuf`
 --> src/webutil/util.rs:7:5
  |
7 | use std::path::PathBuf;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `libgitdit::message::LineIteratorExt`
  --> src/webutil/util.rs:10:5
   |
10 | use libgitdit::message::LineIteratorExt;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `libgitdit::repository::UniqueIssues`
  --> src/webutil/util.rs:11:5
   |
11 | use libgitdit::repository::UniqueIssues;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `error::*;`
  --> src/webutil/util.rs:15:5
   |
15 | use error::*;
   |     ^^^^^^^^^

warning: unused import: `error::ErrorKind as EK`
  --> src/webutil/util.rs:16:5
   |
16 | use error::ErrorKind as EK;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `IteratorExt`
  --> src/webutil/util.rs:18:25
   |
18 | use system::{Abortable, IteratorExt};
   |                         ^^^^^^^^^^^

warning: unused import: `libgitdit::*;`
 --> src/webutil/tags.rs:5:5
  |
5 | use libgitdit::*;
  |     ^^^^^^^^^^^^^

warning: unused import: `iron::prelude`
  --> src/webutil/cat_files.rs:14:5
   |
14 | use iron::prelude::*;
   |     ^^^^^^^^^^^^^

warning: unused variable: `req`
   --> src/webutil/iron_handlers.rs:156:21
    |
156 | pub fn test_handler(req: &mut Request) -> IronResult<Response> {
    |                     ^^^
    |
    = note: #[warn(unused_variables)] on by default
    = note: to disable this warning, consider using `_req` instead

warning: unused variable: `resp`
   --> src/webutil/iron_handlers.rs:163:6
    |
163 | 	let mut resp = Response::new();
    | 	    ^^^^^^^^
    |
    = note: to disable this warning, consider using `_resp` instead

warning: unused variable: `query`
   --> src/webutil/iron_handlers.rs:164:6
    |
164 | 	let ref query = req.extensions.get::<Router>().unwrap().find("message_id").unwrap_or("/");
    | 	    ^^^^^^^^^
    |
    = note: to disable this warning, consider using `_query` instead

warning: unused variable: `head`
   --> src/webutil/cat_files.rs:116:9
    |
116 |     let head = repo.head().unwrap();
    |         ^^^^
    |
    = note: to disable this warning, consider using `_head` instead

warning: unused variable: `author`
   --> src/webutil/cat_files.rs:257:17
    |
257 |             let author = String::from(commits.author().name().unwrap()); 
    |                 ^^^^^^
    |
    = note: to disable this warning, consider using `_author` instead

warning: unused variable: `Issue`
   --> src/webutil/cat_files.rs:362:14
    |
362 | pub fn reply(Issue: Oid) {
    |              ^^^^^
    |
    = note: to disable this warning, consider using `_Issue` instead

warning: unused variable: `repo`
   --> src/webutil/cat_files.rs:425:9
    |
425 |     let repo = open_dit_repo();
    |         ^^^^
    |
    = note: to disable this warning, consider using `_repo` instead

warning: unused variable: `id_len`
   --> src/webutil/cat_files.rs:426:9
    |
426 |     let id_len = 40;
    |         ^^^^^^
    |
    = note: to disable this warning, consider using `_id_len` instead

warning: unused variable: `prios`
   --> src/webutil/cat_files.rs:427:9
    |
427 |     let prios = Repository::open_from_env().unwrap_or_abort().remote_priorization();
    |         ^^^^^
    |
    = note: to disable this warning, consider using `_prios` instead

warning: unused variable: `v`
  --> src/webutil/tags.rs:79:12
   |
79 |         Ok(v) => true,
   |            ^
   |
   = note: to disable this warning, consider using `_v` instead

warning: unused variable: `e`
  --> src/webutil/tags.rs:80:13
   |
80 |         Err(e) => false,
   |             ^
   |
   = note: to disable this warning, consider using `_e` instead

warning: variant is never used: `MalformedFilterSpec`
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: #[warn(dead_code)] on by default
   = note: this error originates in a macro outside of the current crate

warning: variant is never used: `MalformedAuthor`
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: this error originates in a macro outside of the current crate

warning: variant is never used: `MalformedDate`
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: this error originates in a macro outside of the current crate

warning: variant is never used: `UnknownMetadataKey`
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: this error originates in a macro outside of the current crate

warning: variant is never used: `WrappedIOError`
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: this error originates in a macro outside of the current crate

warning: variant is never used: `ProgramError`
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: this error originates in a macro outside of the current crate

warning: variant is never used: `ChildError`
  --> src/error.rs:13:1
   |
13 | / error_chain! {
14 | |     foreign_links {
15 | |         GitError(::git2::Error);
16 | |         GitDitError(::libgitdit::error::Error);
...  |
54 | |     }
55 | | }
   | |_^
   |
   = note: this error originates in a macro outside of the current crate

warning: struct is never used: `Logger`
  --> src/system/logger.rs:19:1
   |
19 | / pub struct Logger {
20 | |     level: log::LogLevel,
21 | | }
   | |_^

warning: method is never used: `init`
  --> src/system/logger.rs:28:5
   |
28 | /     pub fn init(level: log::LogLevel) -> RResult<(), log::SetLoggerError> {
29 | |         log::set_logger(|max_level| {
30 | |             max_level.set(level.to_log_level_filter());
31 | |             Box::from(Logger { level: level })
32 | |         })
33 | |     }
   | |_____^

warning: function is never used: `print_sideband`
  --> src/gitext/callbacks.rs:34:1
   |
34 | / fn print_sideband(data: &[u8]) -> bool {
35 | |     let mut stderr = io::stderr();
36 | |     // We don't consider output errors critical for sideband data.
37 | |     match str::from_utf8(data) {
...  |
43 | |     true
44 | | }
   | |_^

warning: function is never used: `print_tip_updates`
  --> src/gitext/callbacks.rs:49:1
   |
49 | / fn print_tip_updates(refname: &str, old: git2::Oid, new: git2::Oid) -> bool {
50 | |     match (old.is_zero(), new.is_zero()) {
51 | |         (false, false) => println!("[changed]:  {}", refname),
52 | |         (true,  false) => println!("[new]:      {}", refname),
...  |
56 | |     true
57 | | }
   | |_^

warning: function is never used: `print_push_ref_updates`
  --> src/gitext/callbacks.rs:62:1
   |
62 | / fn print_push_ref_updates(refname: &str, failmsg: Option<&str>) -> RResult<(), git2::Error> {
63 | |     match failmsg {
64 | |         None      => println!("[updated]:  {}", refname),
65 | |         Some(msg) => println!("[error]:    {} ({})", refname, msg),
66 | |     };
67 | |     Ok(())
68 | | }
   | |_^

warning: function is never used: `callbacks`
  --> src/gitext/callbacks.rs:73:1
   |
73 | / pub fn callbacks() -> git2::RemoteCallbacks<'static> {
74 | |     let mut retval = git2::RemoteCallbacks::new();
75 | |     retval.credentials(get_creds);
76 | |     retval.sideband_progress(print_sideband);
...  |
79 | |     retval
80 | | }
   | |_^

warning: struct is never used: `MessageHandler`
  --> src/webutil/iron_handlers.rs:40:1
   |
40 | / pub struct MessageHandler {
41 | |     pub message: String
42 | | }
   | |_^

warning: function is never used: `get_css`
  --> src/webutil/iron_handlers.rs:82:1
   |
82 | / pub fn get_css(req: &mut Request) -> IronResult<Response> {
83 | |     println!("get_css running");
84 | |     use iron::mime;
85 | |
...  |
98 | |     Ok(Response::with((content_type, status::Ok, html_text)))    
99 | | }
   | |_^

warning: function is never used: `show_message_handler`
   --> src/webutil/iron_handlers.rs:101:1
    |
101 | / pub fn show_message_handler(req: &mut Request) -> IronResult<Response> {
102 | |     use iron::mime;
103 | |     let message_body = &mut String::with_capacity(1000);
104 | |     let ref query = req.extensions.get::<Router>().unwrap().find("message_id").unwrap_or("/");
...   |
115 | |     //Ok(Response::with((status::Ok, *query)))
116 | | }
    | |_^

warning: function is never used: `test_handler`
   --> src/webutil/iron_handlers.rs:156:1
    |
156 | / pub fn test_handler(req: &mut Request) -> IronResult<Response> {
157 | | 	Ok(Response::new())
158 | | }
    | |_^

warning: method is never used: `new`
  --> src/webutil/cat_files.rs:68:5
   |
68 | /     pub fn new() -> MessageToJson {
69 | |         let json_message = MessageToJson {
70 | |             head : String::new(), // All in one Information for the beginning of the Message
71 | |             hash_id :  String::new(),/*git2::Oid*/
...  |
78 | |         json_message
79 | |     }
   | |_____^

warning: method is never used: `new`
  --> src/webutil/cat_files.rs:84:5
   |
84 | /     pub fn new() -> IssueToJson {
85 | |         let messages : Vec<MessageToJson> = Vec::new();
86 | |         let json_issue = IssueToJson {
87 | |             id : String::new(),
...  |
91 | |         json_issue
92 | |     }
   | |_____^

warning: struct is never used: `temp`
  --> src/webutil/cat_files.rs:96:1
   |
96 | / pub struct temp {
97 | |     pub foo : temp2
98 | | }
   | |_^

warning: struct is never used: `temp2`
   --> src/webutil/cat_files.rs:100:1
    |
100 | / pub struct temp2 {
101 | |     pub name  : String
102 | | }
    | |_^

warning: function is never used: `get_issue_header`
   --> src/webutil/cat_files.rs:305:1
    |
305 | / fn get_issue_header(issue: Issue) -> String {
306 | |     
307 | |     let mut head = String::with_capacity(1000);
308 | |     //Neccessary to split into two statements because of unwrap() consuming lifetime
...   |
324 | |     head
325 | | }
    | |_^

warning: function is never used: `reply`
   --> src/webutil/cat_files.rs:362:1
    |
362 | / pub fn reply(Issue: Oid) {
363 | |     
364 | | }
    | |_^

warning: function is never used: `show_commit`
   --> src/webutil/cat_files.rs:402:1
    |
402 | / pub fn show_commit<'r>(commit: &Commit, header: &'r mut String) -> &'r String{
403 | | 	use chrono::{FixedOffset, TimeZone};
404 | | 	    
405 | |     let gtime = commit.time();
...   |
419 | |     header
420 | | }
    | |_^

warning: function is never used: `show_impl`
   --> src/webutil/cat_files.rs:422:1
    |
422 | / pub fn show_impl<'r>(issue : Issue, result : &'r mut String) -> &'r String{
423 | |     use chrono::format::strftime::StrftimeItems;
424 | |
425 | |     let repo = open_dit_repo();
...   |
449 | |     result   
450 | | }
    | |_^

warning: function is never used: `value_to_issue`
   --> src/webutil/util.rs:115:1
    |
115 | / pub fn value_to_issue<'r>(repo: &'r Repository, value: &str) -> Issue<'r> {
116 | |     let id = git2::Oid::from_str(value).unwrap_or_abort();
117 | |     repo.find_issue(id).unwrap_or_abort()
118 | | }
    | |_^

warning: variant is never used: `deleted`
  --> src/webutil/tags.rs:13:5
   |
13 |     deleted,
   |     ^^^^^^^

warning: struct is never used: `TagName`
  --> src/webutil/tags.rs:25:1
   |
25 | / struct TagName {
26 | |     tag_type : IssueCategories,
27 | |     target_oid : Oid,
28 | | }
   | |_^

warning: function is never used: `contains_tag`
  --> src/webutil/tags.rs:72:1
   |
72 | / pub fn contains_tag(tag_name : &str) -> bool {
73 | |     println!("contains_tag running");
74 | |
75 | |     let repo = open_dit_repo(); 
...  |
81 | |     }
82 | | }
   | |_^

warning: variant is never used: `Id`
  --> src/display/message.rs:26:5
   |
26 |     Id(usize),
   |     ^^^^^^^^^

warning: variant is never used: `Subject`
  --> src/display/message.rs:27:5
   |
27 |     Subject,
   |     ^^^^^^^

warning: variant is never used: `Author`
  --> src/display/message.rs:28:5
   |
28 |     Author,
   |     ^^^^^^

warning: variant is never used: `AuthorName`
  --> src/display/message.rs:29:5
   |
29 |     AuthorName,
   |     ^^^^^^^^^^

warning: variant is never used: `AuthorEMail`
  --> src/display/message.rs:30:5
   |
30 |     AuthorEMail,
   |     ^^^^^^^^^^^

warning: variant is never used: `Date`
  --> src/display/message.rs:31:5
   |
31 |     Date(StrftimeItems<'a>),
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: variant is never used: `Body`
  --> src/display/message.rs:32:5
   |
32 |     Body,
   |     ^^^^

warning: variant is never used: `BodyText`
  --> src/display/message.rs:33:5
   |
33 |     BodyText,
   |     ^^^^^^^^

warning: variant is never used: `Trailers`
  --> src/display/message.rs:34:5
   |
34 |     Trailers,
   |     ^^^^^^^^

warning: variant is never used: `Trailer`
  --> src/display/message.rs:35:5
   |
35 |     Trailer(TrailerSpec<'a>),
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: variant is never used: `IfId`
  --> src/display/message.rs:36:5
   |
36 |     IfId(Oid, Vec<FormattingToken<MessageFmtToken<'a>, Commit<'a>>>),
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method is never used: `reverse`
  --> src/display/msgtree.rs:72:5
   |
72 | /     pub fn reverse(&mut self) {
73 | |         match self {
74 | |             &mut MarkType::Start => *self = MarkType::End,
75 | |             &mut MarkType::End   => *self = MarkType::Start,
76 | |             _ => {},
77 | |         }
78 | |     }
   | |_____^

warning: method is never used: `empty`
  --> src/display/msgtree.rs:87:5
   |
87 | /     pub fn empty() -> TreeGraphElemLine {
88 | |         TreeGraphElemLine(vec![])
89 | |     }
   | |_____^

warning: method is never used: `reverse_marks`
   --> src/display/msgtree.rs:98:5
    |
98  | /     pub fn reverse_marks(&mut self) {
99  | |         for elem in self.0.iter_mut() {
100 | |             match elem {
101 | |                 &mut TreeGraphElem::Mark(ref mut mt) => mt.reverse(),
...   |
104 | |         }
105 | |     }
    | |_____^

warning: method is never used: `commit_iterator`
   --> src/display/msgtree.rs:109:5
    |
109 | /     pub fn commit_iterator(self) -> CommitTreeGraphLines {
110 | |         CommitTreeGraphLines(self.0)
111 | |     }
    | |_____^

warning: struct is never used: `CommitTreeGraphLines`
   --> src/display/msgtree.rs:142:1
    |
142 | pub struct CommitTreeGraphLines(Vec<TreeGraphElem>);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
  --> src/webutil/iron_handlers.rs:53:9
   |
53 |     let mut path : String= String::from("src/webutil/templates/index.html");
   |         ^^^^^^^^
   |
   = note: #[warn(unused_mut)] on by default

warning: variable does not need to be mutable
  --> src/webutil/iron_handlers.rs:69:9
   |
69 |     let mut path : String= String::from("src/webutil/templates/index.html");
   |         ^^^^^^^^

warning: variable does not need to be mutable
   --> src/webutil/iron_handlers.rs:163:6
    |
163 | 	let mut resp = Response::new();
    | 	    ^^^^^^^^

warning: type `temp` should have a camel case name such as `Temp`
  --> src/webutil/cat_files.rs:96:1
   |
96 | / pub struct temp {
97 | |     pub foo : temp2
98 | | }
   | |_^
   |
   = note: #[warn(non_camel_case_types)] on by default

warning: type `temp2` should have a camel case name such as `Temp2`
   --> src/webutil/cat_files.rs:100:1
    |
100 | / pub struct temp2 {
101 | |     pub name  : String
102 | | }
    | |_^

warning: variable does not need to be mutable
   --> src/webutil/cat_files.rs:135:13
    |
135 |         let mut json_issue = IssueToJson {
    |             ^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/webutil/cat_files.rs:168:17
    |
168 |             let mut json_issue = IssueToJson {
    |                 ^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/webutil/cat_files.rs:234:17
    |
234 |             let mut json_message = MessageToJson {
    |                 ^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/webutil/cat_files.rs:260:17
    |
260 |             let mut message = MessageToJson {
    |                 ^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/webutil/cat_files.rs:273:9
    |
273 |     let mut init_commit = issue.initial_message().unwrap();
    |         ^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/webutil/cat_files.rs:274:9
    |
274 |     let mut head = get_message_header(init_commit); 
    |         ^^^^^^^^

warning: variable does not need to be mutable
   --> src/webutil/cat_files.rs:309:9
    |
309 |     let mut author = issue.initial_message().unwrap();
    |         ^^^^^^^^^^

warning: variable `Issue` should have a snake case name such as `issue`
   --> src/webutil/cat_files.rs:362:14
    |
362 | pub fn reply(Issue: Oid) {
    |              ^^^^^
    |
    = note: #[warn(non_snake_case)] on by default

warning: variant `new` should have a camel case name such as `New`
 --> src/webutil/tags.rs:9:5
  |
9 |     new,
  |     ^^^

warning: variant `critical` should have a camel case name such as `Critical`
  --> src/webutil/tags.rs:10:5
   |
10 |     critical,
   |     ^^^^^^^^

warning: variant `trivial` should have a camel case name such as `Trivial`
  --> src/webutil/tags.rs:11:5
   |
11 |     trivial,
   |     ^^^^^^^

warning: variant `subsribed` should have a camel case name such as `Subsribed`
  --> src/webutil/tags.rs:12:5
   |
12 |     subsribed,
   |     ^^^^^^^^^

warning: variant `deleted` should have a camel case name such as `Deleted`
  --> src/webutil/tags.rs:13:5
   |
13 |     deleted,
   |     ^^^^^^^

warning: unused `std::result::Result` which must be used
  --> src/webutil/tags.rs:94:5
   |
94 |     remove(IssueCategories::new);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: #[warn(unused_must_use)] on by default

warning: unused `std::result::Result` which must be used
  --> src/webutil/tags.rs:95:5
   |
95 |     remove(IssueCategories::critical);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused `std::result::Result` which must be used
  --> src/webutil/tags.rs:96:5
   |
96 |     remove(IssueCategories::trivial);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused `std::result::Result` which must be used
  --> src/webutil/tags.rs:97:5
   |
97 |     remove(IssueCategories::subsribed);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused `std::result::Result` which must be used
   --> src/webutil/tags.rs:110:5
    |
110 |     repo.tag_lightweight(&name, &obj, true);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/display/msgtree.rs:191:78
    |
191 |             let mut elems : TreeGraphElemLine = self.parents.iter_mut().map(|mut parent| {
    |                                                                              ^^^^^^^^^^

    Finished dev [unoptimized + debuginfo] target(s) in 11.85 secs
     Running `target/debug/webgit_iron`
